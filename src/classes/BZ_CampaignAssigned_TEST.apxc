@isTest 
private class BZ_CampaignAssigned_TEST {
    static testMethod void validateLCCampaignAssigned() {
        // This also create the task that we want to test if it gets closed by the trigger.
        Lead l = new Lead(OwnerId=UserInfo.getUserId(), User_Type__c='Volunteer', LeadSource='Website Signup', FirstName='Someone', LastName='New', Company='Someone New (individual)', Status='Open');
        insert l;
        
        // Convert Lead to Contact to get everything setup properly (e.g. Lead.ConvertedContactId must be set).
        Database.LeadConvert lc = new Database.LeadConvert();
        lc.setLeadId(l.id);
        LeadStatus convertStatus = [Select Id, MasterLabel FROM LeadStatus WHERE IsConverted=true LIMIT 1];
        lc.setConvertedStatus(convertStatus.MasterLabel);
        Database.LeadConvertResult lcr = Database.convertLead(lc);        
        
        Contact contact = [SELECT Id FROM Contact WHERE Id = :lcr.contactId];
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner1', OwnerId=userInfo.getUserId());
        insert campaignOwner;

        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        
        // This fires the trigger we're testing.
        test.startTest();
        insert cm;
        test.stopTest();
        
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cm.Id];
        Contact updatedContact = [SELECT Id, Volunteer_Information__c FROM Contact WHERE Id=:updatedCm.ContactId];
        System.assert(updatedContact.Volunteer_Information__c == 'LC Pipeline', 'When a Contact is added to an LC Campaign, their Volunteer Information should be set.');

        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==1, 'Expected Task to be created to Send Intro Email to LCs');
        List<Task> resultingClosedTasks = [SELECT Id, Status FROM Task
                                           WHERE WhoId=:updatedContact.Id AND
                                           Subject LIKE '%New Website Signup%'];
        System.assert(resultingClosedTasks.get(0).Status == 'Completed', 'Expected Task to deal with New Website Signup\'s to be closed automatically after converting them and assigning them to a Campaign.');
    }
    
    static testMethod void validateUniversityCampaignAssigned() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner2', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        Contact contact = new Contact(FirstName='Test', LastName='User2', User_Type__c='University');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Partners');
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        
        // This fires the trigger we're testing.
        insert cm;
        
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cm.Id];
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==1, 'Expected Task to be created to Send Intro Email to University Partners');
    }
    
    static testMethod void validateOtherCampaignAssigned() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner3', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        
        // Mimic someone who signed up and chose "Other" as "I am interested in..."
        Contact contact = new Contact(FirstName='Test', LastName='User3', User_Type__c='Other');
        insert contact;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Other');
        insert campaign;
        
        CampaignMember cm = new CampaignMember();
        cm.CampaignId=campaign.Id;
        cm.ContactId=contact.Id;
        
        // This fires the trigger we're testing.
        insert cm;
        
        CampaignMember updatedCm = [SELECT Id, ContactId, CampaignId FROM CampaignMember WHERE Id=:cm.Id];
        List<Task> resultingTasks = [SELECT Id, WhoId, WhatId FROM Task
                                     WHERE WhoId=:updatedCm.ContactId AND
                                           WhatId=:updatedCm.CampaignId AND
                                           Subject LIKE '%Send Intro Email%'];
        System.assert(resultingTasks.size()==1, 'Expected Task to be created to Send Intro Email to Other Campaigns');
    }
}
